<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls" xmlns:Custom1="http://metro.mahapps.com/winfx/xaml/shared"
                    xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">

    <!-- Password -->


    <!-- Colours -->
    <Color x:Key="Z-Colour-Gold">#fab800</Color>
    <Color x:Key="Z-Colour-Gray">#808080</Color>
    <Color x:Key="Z-Colour-Dark">#19191A</Color>
    <Color x:Key="Z-Colour-Black">#000000</Color>
    <Color x:Key="Z-Colour-White">#FFFFFF</Color>
    <Color x:Key="Z-Colour-Good">#64fc80</Color>
    <Color x:Key="Z-Colour-Bad">#64fc80</Color>
    <Color x:Key="Z-Colour-Transparent">Transparent</Color>

    <!-- Brushes -->
    
    <SolidColorBrush x:Key="Z-Brush-Gold" Color="{StaticResource Z-Colour-Gold}" />
    <SolidColorBrush x:Key="Z-Brush-Gray" Color="{StaticResource Z-Colour-Gray}" />
    <SolidColorBrush x:Key="Z-Brush-Dark" Color="{StaticResource Z-Colour-Dark}" />
    <SolidColorBrush x:Key="Z-Brush-Black" Color="{StaticResource Z-Colour-Black}" />
    <SolidColorBrush x:Key="Z-Brush-White" Color="{StaticResource Z-Colour-White}" />
    <SolidColorBrush x:Key="Z-Brush-Good" Color="{StaticResource Z-Colour-Good}" />
    <SolidColorBrush x:Key="Z-Brush-Transparent" Color="{StaticResource Z-Colour-Transparent}" />

    <SolidColorBrush x:Key="WindowTitleBrush" Color="{DynamicResource Z-Colour-Gold}" />
    
    <Style TargetType="{x:Type Custom:WindowButtonCommands}">

        <Setter Property="Foreground"
                Value="{DynamicResource Z-Brush-Gold}" />
        <Setter Property="Background"
                Value="{DynamicResource Z-Brush-Gold}" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding ParentWindow.ShowTitleBar, RelativeSource={RelativeSource Self}}"
                         Value="True">
                <Setter Property="Foreground"
                        Value="{DynamicResource Z-Brush-Black}" />
                <Setter Property="Background"
                        Value="{DynamicResource Z-Brush-Gold}" />
            </DataTrigger>
        </Style.Triggers>

    </Style>


    <!-- Fonts -->
    <FontFamily x:Key="Z-Font-Family">Segoe UI, Lucida Sans Unicode, Verdana</FontFamily>

    <!-- Sizes -->
    <system:Double x:Key="Z-Tiny">10</system:Double>
    <system:Double x:Key="Z-Small">12</system:Double>
    <system:Double x:Key="Z-Normal">16</system:Double>
    <system:Double x:Key="Z-OneHalf">24</system:Double>
    <system:Double x:Key="Z-Double">32</system:Double>


    <!-- StackPanel Align Right -->
    <Style x:Key="Z-Right" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <!-- Align Content Horizontally and Vertically to parent container -->
    <Style x:Key="Z-Middle" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- Model box (applied to border) -->
    <Style x:Key="Z-Modal" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
        <Setter Property="Padding" Value="8" />
    </Style>

    <!-- TextBlock -->
    <Style x:Key="Z-Paragraph" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-Normal}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Gold}" />
        <Setter Property="Padding" Value="10,4,4,4"/>
    </Style>

    
    <!-- Label -->
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-Normal}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Gold}" />
        <Setter Property="Padding" Value="10,4,4,4"/>
    </Style>

    <!-- Label Header -->
    <Style x:Key="Z-Header" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-Double}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Gold}" />
        <Setter Property="Padding" Value="11,4,4,4"/>
    </Style>

    <Style x:Key="Z-Header-Inverse" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-Double}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Dark}" />
        <Setter Property="Background" Value="{StaticResource Z-Brush-Gold}" />
        <Setter Property="Padding" Value="11,4,4,4"/>
    </Style>

    <!-- Label Half-Header -->
    <Style x:Key="Z-Half-Header" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-OneHalf}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Gold}" />
        <Setter Property="Padding" Value="11,4,4,4"/>
    </Style>

    <Style x:Key="Z-Half-Header-Inverse" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-OneHalf}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Dark}" />
        <Setter Property="Background" Value="{StaticResource Z-Brush-Gold}" />
        <Setter Property="Padding" Value="11,4,4,4"/>
    </Style>

    <!-- Name of a field textbox/password -->
    <Style x:Key="Z-Field-Name" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource Z-Font-Family}" />
        <Setter Property="FontSize" Value="{StaticResource Z-Small}" />
        <Setter Property="Foreground" Value="{StaticResource Z-Brush-Gray}" />
        <Setter Property="Padding" Value="10,8,4,2"/>
    </Style>

    <!-- Style for Button with Text -->
    <Style x:Key="Z-Button" TargetType="{x:Type Button}">
        <Style.BasedOn>
            <Style TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
                <Setter Property="Custom:ButtonHelper.CornerRadius" Value="0"/>
                <Setter Property="Height" Value="34"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="{DynamicResource Z-Normal}"/>
                <Setter Property="FontFamily" Value="{DynamicResource Z-Font-Family}"/>
                <Setter Property="Background" Value="{DynamicResource Z-Brush-Dark}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="Padding" Value="8,2,8,2"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border x:Name="Background" Background="{TemplateBinding Background}" />
                                <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Border x:Name="DisabledVisualElement" Background="{DynamicResource ControlsDisabledBrush}" CornerRadius="{Binding (Custom:ButtonHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Custom:ButtonHelper.PreserveTextCase" Value="False">
                                    <Setter Property="Content" TargetName="contentPresenter" Value="{Binding Content, Converter={Custom1:ToUpperConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="Custom:ButtonHelper.PreserveTextCase" Value="True">
                                    <Setter Property="Content" TargetName="contentPresenter" Value="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Black}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Z-Brush-Transparent}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Z-Brush-Transparent}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter Property="Background" TargetName="Background" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="Background" Value="{DynamicResource Z-Brush-Gray}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>

    <!-- Circle Button -->
    <Style x:Key="Z-Circle-Button" TargetType="{x:Type Button}">
        <Style.Resources>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Z-Button}">
                <Setter Property="MinWidth" Value="100"></Setter>
                <Setter Property="Height" Value="34"></Setter>
            </Style>
        </Style.Resources>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Control}">
                                <Ellipse Margin="8" SnapsToDevicePixels="True" Stroke="{DynamicResource BlackBrush}" StrokeThickness="1" StrokeDashArray="2 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Fill="{TemplateBinding Background}" Margin="4" StrokeThickness="0"/>
                        <Ellipse x:Name="ellipsebg" Fill="{DynamicResource Z-Brush-Gold}" Margin="4" Opacity="0" StrokeThickness="0"/>
                        <Ellipse x:Name="ellipse" Margin="4" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{Binding BorderThickness.Left, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="content" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" From="0" To="0.3" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ellipsebg"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.5" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ellipsebg"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="ellipse" Value="1"/>
                            <Setter Property="Stroke"  TargetName="ellipse" Value="{DynamicResource Z-Brush-White}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                            <Setter Property="Opacity" TargetName="ellipse" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Button Group Aligned Left -->
    <Style x:Key="Z-Button-Group" TargetType="{x:Type StackPanel}">
        <Style.Resources>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource Z-Button}">
                <Setter Property="MinWidth" Value="100"></Setter>
                <Setter Property="Height" Value="34"></Setter>
            </Style>
        </Style.Resources>
        <Style.BasedOn>
            <Style TargetType="{x:Type StackPanel}">
                <Setter Property="Orientation" Value="Horizontal"/>
                <Setter Property="Height" Value="48"/>
            </Style>
        </Style.BasedOn>
    </Style>

    <!-- Button Group Aligned Center -->
    <Style x:Key="Z-Button-Group-Center" TargetType="{x:Type StackPanel}" BasedOn="{StaticResource Z-Button-Group}">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!-- Button Group Aligned Right -->
    <Style x:Key="Z-Button-Group-Right" TargetType="{x:Type StackPanel}" BasedOn="{StaticResource Z-Button-Group}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <!-- Style for Button with Text -->
    <Style x:Key="Z-Button-Compound" TargetType="{x:Type Button}">
        <Style.BasedOn>
            <Style TargetType="{x:Type Button}">
                <Setter Property="Custom:ButtonHelper.CornerRadius" Value="0"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="{DynamicResource Z-Normal}"/>
                <Setter Property="FontFamily" Value="{DynamicResource Z-Font-Family}"/>
                <Setter Property="Background" Value="{DynamicResource Z-Brush-Dark}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="Padding" Value="8,8,8,8"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid>
                                <Border x:Name="Background" Background="{TemplateBinding Background}" />
                                <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Border x:Name="DisabledVisualElement" Background="{DynamicResource ControlsDisabledBrush}" CornerRadius="{Binding (Custom:ButtonHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Custom:ButtonHelper.PreserveTextCase" Value="False">
                                    <Setter Property="Content" TargetName="contentPresenter" Value="{Binding Content, Converter={Custom1:ToUpperConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="Custom:ButtonHelper.PreserveTextCase" Value="True">
                                    <Setter Property="Content" TargetName="contentPresenter" Value="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Black}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Z-Brush-Transparent}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Z-Brush-Transparent}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter Property="Background" TargetName="Background" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="Background" Value="{DynamicResource Z-Brush-Gray}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>

    <!-- StackPanel Align Left -->
    <Style x:Key="Z-Left" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>
    
    <!-- TextBox -->
    <Style x:Key="Z-TextBox" TargetType="{x:Type TextBox}">
        <Style.BasedOn>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}"/>
                <Setter Property="Custom:TextBoxHelper.IsMonitoring" Value="True"/>
                <Setter Property="Custom:ControlsHelper.ButtonWidth" Value="22"/>
                <Setter Property="SelectionBrush" Value="{DynamicResource Z-Brush-Gray}"/>
                <Setter Property="FontFamily" Value="{DynamicResource Z-Font-Family}"/>
                <Setter Property="FontSize" Value="{StaticResource Z-Normal}"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Background" Value="{DynamicResource Z-Brush-Dark}"/>
                <Setter Property="Foreground" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="Custom:ControlsHelper.FocusBorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Custom:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}"/>
                <Setter Property="CaretBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Height" Value="34"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="enterGotFocus">
                                    <DoubleAnimation Duration="0:0:0.2" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="exitGotFocus">
                                    <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="enterHasText">
                                    <DoubleAnimation Duration="0:0:0.2" From="0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="exitHasText">
                                    <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border x:Name="Base" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Grid x:Name="PART_InnerGrid" Margin="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition x:Name="ButtonColumn" Width="{Binding (Custom:ControlsHelper.ButtonWidth), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition x:Name="ButtonRow" Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border x:Name="ReadOnlyVisualElement" Background="{x:Null}" Grid.ColumnSpan="2" Opacity="0" Grid.Row="1"/>
                                    <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Background="{x:Null}" Grid.Column="0" IsTabStop="False" Margin="2" Grid.Row="1" VerticalAlignment="Stretch"/>
                                    <TextBlock x:Name="Message" Grid.Column="0" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="6,2" Opacity="0.6" Padding="{TemplateBinding Padding}" Grid.Row="1" Text="{TemplateBinding Custom:TextBoxHelper.Watermark}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <Grid x:Name="FloatingMessageContainer" Grid.ColumnSpan="2" Grid.Column="0" Height="0" IsHitTestVisible="False" Margin="5,0" Visibility="Visible">
                                        <TextBlock x:Name="FloatingMessage" Foreground="{TemplateBinding Foreground}" FontSize="{DynamicResource FloatingWatermarkFontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Opacity="0.6" Text="{TemplateBinding Custom:TextBoxHelper.Watermark}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <TextBlock.RenderTransform>
                                                <TranslateTransform/>
                                            </TextBlock.RenderTransform>
                                        </TextBlock>
                                    </Grid>
                                    <Button x:Name="PART_ClearText" Content="{Binding (Custom:TextBoxHelper.ButtonContent), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="1" Foreground="{TemplateBinding Foreground}" FontSize="16" FontFamily="{Binding (Custom:TextBoxHelper.ButtonFontFamily), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Custom:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding (Custom:TextBoxHelper.ClearTextButton), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.RowSpan="2" Style="{DynamicResource ChromelessButtonStyle}">
                                        <Button.Visibility>
                                            <Binding Mode="OneWay" Path="(Custom:TextBoxHelper.ClearTextButton)" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Button.Visibility>
                                    </Button>
                                </Grid>
                                <Border x:Name="DisabledVisualElement" BorderBrush="{DynamicResource Z-Brush-Gray}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
                                    <Setter Property="Visibility" TargetName="Message" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}" Value="False">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.Watermark), RelativeSource={RelativeSource Self}}" Value="">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="False">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="TextWrapping" Value="NoWrap"/>
                                        <Condition Property="AcceptsReturn" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Width" TargetName="ButtonColumn" Value="{Binding ActualHeight, ElementName=ButtonRow, Mode=OneWay}"/>
                                </MultiTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.ClearTextButton), RelativeSource={RelativeSource Self}}" Value="False">
                                    <Setter Property="Grid.ColumnSpan" TargetName="PART_ContentHost" Value="2"/>
                                    <Setter Property="Grid.ColumnSpan" TargetName="Message" Value="2"/>
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="Base" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="DisabledVisualElement" Value="0.6"/>
                                </Trigger>
                                <Trigger Property="IsReadOnly" Value="True">
                                    <Setter Property="Opacity" TargetName="ReadOnlyVisualElement" Value="1"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" TargetName="Base" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Foreground" TargetName="FloatingMessage" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Opacity" TargetName="FloatingMessage" Value="1"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" SourceName="PART_ClearText" Value="True">
                                    <Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-Dark}"/>
                                    <Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" SourceName="PART_ClearText" Value="True">
                                    <Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-Dark}"/>
                                    <Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Custom:TextBoxHelper.HasText" Value="False"/>
                                        <Condition Property="IsFocused" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <Trigger Property="Custom:TextBoxHelper.HasText" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" From="0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="Custom:TextBoxHelper.IsWaitingForData" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation AutoReverse="True" Duration="0:0:2" From="0" RepeatBehavior="Forever" To="1" Storyboard.TargetProperty="(Effect).Opacity" Storyboard.TargetName="Base"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                </Trigger>
                                <Trigger Property="Custom:TextBoxHelper.IsWaitingForData" Value="False">
                                    <Setter Property="Effect" TargetName="Base" Value="{x:Null}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>
    
    
    <!-- Password -->
    <Style x:Key="Z-Password" TargetType="{x:Type PasswordBox}">
        <Style.BasedOn>
            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="Custom:PasswordBoxHelper.CapsLockIcon">
                    <Setter.Value>
                        <Grid Background="{DynamicResource BlackBrush}" Height="16" Opacity="0.8" Width="16">
                            <Grid.OpacityMask>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Canvas Height="24" Width="24">
                                            <Path Data="M13,14L11,14 11,10 13,10 M13,18L11,18 11,16 13,16 M1,21L23,21 12,2 1,21z" Fill="Black"/>
                                        </Canvas>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Grid.OpacityMask>
                        </Grid>
                    </Setter.Value>
                </Setter>
                <Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}"/>
                <Setter Property="Custom:TextBoxHelper.IsMonitoring" Value="True"/>
                <Setter Property="Custom:ControlsHelper.ButtonWidth" Value="22"/>
                <Setter Property="SelectionBrush" Value="{DynamicResource Z-Brush-Gray}"/>
                <Setter Property="FontFamily" Value="{DynamicResource Z-Font-Family}"/>
                <Setter Property="FontSize" Value="{StaticResource Z-Normal}"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="MinHeight" Value="26"/>
                <Setter Property="Background" Value="{DynamicResource Z-Brush-Dark}"/>
                <Setter Property="Foreground" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="Custom:ControlsHelper.FocusBorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Custom:ControlsHelper.MouseOverBorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorTemplate}"/>
                <Setter Property="CaretBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Margin" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type PasswordBox}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="enterGotFocus">
                                    <DoubleAnimation Duration="0:0:0.2" To="0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="exitGotFocus">
                                    <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="enterHasText">
                                    <DoubleAnimation Duration="0:0:0.2" From="0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                                <Storyboard x:Key="exitHasText">
                                    <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border x:Name="Base" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Grid Margin="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition x:Name="ButtonColumn" Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition x:Name="ButtonRow" Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border x:Name="ReadOnlyVisualElement" Background="{x:Null}" Grid.ColumnSpan="2" Opacity="0" Grid.Row="1"/>
                                    <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Background="{x:Null}" Grid.Column="0" IsTabStop="False" Margin="2" Grid.Row="1" VerticalAlignment="Stretch"/>
                                    <TextBlock x:Name="Message" Grid.Column="0" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="6,2" Opacity="0.6" Padding="{TemplateBinding Padding}" Grid.Row="1" Text="{TemplateBinding Custom:TextBoxHelper.Watermark}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <Grid x:Name="FloatingMessageContainer" Grid.ColumnSpan="2" Grid.Column="0" Height="0" IsHitTestVisible="False" Margin="5,0" Visibility="Visible">
                                        <TextBlock x:Name="FloatingMessage" Foreground="{TemplateBinding Foreground}" FontSize="{DynamicResource FloatingWatermarkFontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Opacity="0.6" Text="{TemplateBinding Custom:TextBoxHelper.Watermark}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <TextBlock.RenderTransform>
                                                <TranslateTransform/>
                                            </TextBlock.RenderTransform>
                                        </TextBlock>
                                    </Grid>
                                    <Button x:Name="PART_ClearText" Content="{Binding (Custom:TextBoxHelper.ButtonContent), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="2" Foreground="{TemplateBinding Foreground}" FontSize="16" FontFamily="{Binding (Custom:TextBoxHelper.ButtonFontFamily), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Custom:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding (Custom:TextBoxHelper.ClearTextButton), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.RowSpan="2" Style="{DynamicResource ChromelessButtonStyle}" Width="{Binding (Custom:ControlsHelper.ButtonWidth), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Button.Visibility>
                                            <Binding Mode="OneWay" Path="(Custom:TextBoxHelper.ClearTextButton)" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Button.Visibility>
                                    </Button>
                                    <ContentPresenter x:Name="PART_CapsLockIndicator" Content="{Binding (Custom:PasswordBoxHelper.CapsLockIcon), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="1" TextElement.Foreground="{DynamicResource ControlsValidationBrush}" HorizontalAlignment="Right" Margin="1" Grid.Row="0" Grid.RowSpan="2" ToolTip="{Binding (Custom:PasswordBoxHelper.CapsLockWarningToolTip), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" VerticalAlignment="Center"/>
                                </Grid>
                                <Border x:Name="DisabledVisualElement" BorderBrush="{DynamicResource ControlsDisabledBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource ControlsDisabledBrush}" IsHitTestVisible="False" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Password, Mode=OneWay, RelativeSource={RelativeSource Self}}" Value="">
                                    <Setter Property="Visibility" TargetName="Message" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}" Value="False">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.Watermark), RelativeSource={RelativeSource Self}}" Value="">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding (Custom:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" Value="False">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="20" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseIn" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="15" Storyboard.TargetProperty="Height" Storyboard.TargetName="FloatingMessageContainer">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseInOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FloatingMessageContainer"/>
                                                <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="FloatingMessage">
                                                    <DoubleAnimation.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" Exponent="2"/>
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="Base" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="DisabledVisualElement" Value="0.6"/>
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" TargetName="Base" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Foreground" TargetName="FloatingMessage" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" SourceName="PART_ClearText" Value="True">
                                    <Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-Dark}"/>
                                    <Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" SourceName="PART_ClearText" Value="True">
                                    <Setter Property="Background" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-Dark}"/>
                                    <Setter Property="Foreground" TargetName="PART_ClearText" Value="{DynamicResource Z-Brush-White}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Custom:TextBoxHelper.HasText" Value="False"/>
                                        <Condition Property="IsFocused" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <Trigger Property="Custom:TextBoxHelper.HasText" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" From="1" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Message"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                    <Setter Property="Visibility" TargetName="Message" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>


    <!-- Icons from -->

    <Canvas x:Key="Z-Icon-ArrowLeft" Width="76" Height="76" Clip="F1 M 0,0L 76,0L 76,76L 0,76L 0,0">
        <Path Width="39.25" Height="28" Canvas.Left="17.75" Canvas.Top="24" Stretch="Fill" Fill="{DynamicResource Z-Brush-Gold}" Data="F1 M 57,42L 57,34L 32.25,34L 42.25,24L 31.75,24L 17.75,38L 31.75,52L 42.25,52L 32.25,42L 57,42 Z "/>
    </Canvas>
    <Style x:Key="Z-Tab-Item" TargetType="{x:Type TabItem}">
        <Style.BasedOn>
            <Style TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Padding" Value="0,0,10,0"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="MinWidth" Value="5"/>
                <Setter Property="MinHeight" Value="5"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Z-Brush-White}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Z-Brush-Gold}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Custom:ControlsHelper.HeaderFontSize" Value="{DynamicResource Z-OneHalf}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <DockPanel.Resources>
                                        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                                    </DockPanel.Resources>
                                    <ContentPresenter x:Name="ContentSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" DockPanel.Dock="Top" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontWeight="{TemplateBinding Custom:ControlsHelper.HeaderFontWeight}" TextElement.FontStretch="{TemplateBinding Custom:ControlsHelper.HeaderFontStretch}" TextElement.FontSize="{TemplateBinding Custom:ControlsHelper.HeaderFontSize}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    <Rectangle x:Name="Underline" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Height="2" Margin="0,1,0,0">
                                        <Rectangle.Visibility>
                                            <Binding Path="(Custom:TabControlHelper.IsUnderlined)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Rectangle.Visibility>
                                    </Rectangle>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="TabStripPlacement" Value="Left">
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                                    <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Right"/>
                                    <Setter Property="Width" TargetName="Underline" Value="2"/>
                                    <Setter Property="Height" TargetName="Underline" Value="Auto"/>
                                    <Setter Property="Margin" TargetName="Underline" Value="1,0,0,0"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Top">
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                                    <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Bottom"/>
                                    <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Right"/>
                                    <Setter Property="Height" TargetName="Underline" Value="2"/>
                                    <Setter Property="Width" TargetName="Underline" Value="Auto"/>
                                    <Setter Property="Margin" TargetName="Underline" Value="0,1,0,0"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Right">
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                                    <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Left"/>
                                    <Setter Property="Width" TargetName="Underline" Value="2"/>
                                    <Setter Property="Height" TargetName="Underline" Value="Auto"/>
                                    <Setter Property="Margin" TargetName="Underline" Value="0,0,1,0"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                                    <Setter Property="DockPanel.Dock" TargetName="Underline" Value="Top"/>
                                    <Setter Property="Height" TargetName="Underline" Value="2"/>
                                    <Setter Property="Width" TargetName="Underline" Value="Auto"/>
                                    <Setter Property="Margin" TargetName="Underline" Value="0,0,0,1"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource Z-Brush-Good}"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource Z-Brush-Gold}"/>
                                    <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource Z-Brush-Good}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" SourceName="ContentSite" Value="True">
                                    <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource Z-Brush-Good}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" SourceName="ContentSite" Value="True"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="{DynamicResource Z-Brush-White}"/>
                                    <Setter Property="Fill" TargetName="Underline" Value="{DynamicResource Z-Brush-White}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>
    
    <!-- Tab -->
    <Style x:Key="Z-Tab" TargetType="{x:Type TabControl}">
        <Setter Property="Custom:TabControlHelper.Transition" Value="Left"/>
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Padding" Value="0,20,0,0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="True" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <Custom:TransitioningContentControl Custom1:ReloadBehavior.OnSelectedTabChanged="True" RestartTransitionOnContentChange="True" Transition="{TemplateBinding Custom:TabControlHelper.Transition}">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Custom:TransitioningContentControl>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Custom:TabControlHelper.Transition" Value="Right"/>
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Z-Brush-White}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Scroll -->
    <Style x:Key="Z-ScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Style.BasedOn>
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="Custom:ScrollBarHelper.VerticalScrollBarOnLeftSide" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="leftColumn" Width="*"/>
                                    <ColumnDefinition x:Name="rightColumn" Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                                <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Custom:ScrollBarHelper.VerticalScrollBarOnLeftSide" Value="True">
                                    <Setter Property="Width" TargetName="leftColumn" Value="Auto"/>
                                    <Setter Property="Width" TargetName="rightColumn" Value="Auto"/>
                                    <Setter Property="Grid.Column" TargetName="PART_ScrollContentPresenter" Value="1"/>
                                    <Setter Property="Grid.Column" TargetName="PART_VerticalScrollBar" Value="0"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.BasedOn>
    </Style>




</ResourceDictionary>